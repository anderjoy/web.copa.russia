// <auto-generated />
using CRUD.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace API.Migrations
{
    [DbContext(typeof(TimeContext))]
    [Migration("20180414191854_initial")]
    partial class initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.2-rtm-10011")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Models.Ficha", b =>
                {
                    b.Property<int>("JogadorId");

                    b.Property<decimal>("Altura");

                    b.Property<int>("Camisa");

                    b.Property<string>("Naturalidade")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("Posicao")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("JogadorId");

                    b.ToTable("FICHA");
                });

            modelBuilder.Entity("Models.Gol", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<TimeSpan>("Hora");

                    b.Property<int>("JogadorId");

                    b.Property<int>("JogoId");

                    b.Property<int>("TimeId");

                    b.HasKey("Id");

                    b.HasIndex("JogadorId");

                    b.HasIndex("JogoId");

                    b.HasIndex("TimeId");

                    b.ToTable("GOL");
                });

            modelBuilder.Entity("Models.Jogador", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int>("TimeId");

                    b.HasKey("Id");

                    b.HasIndex("TimeId");

                    b.ToTable("JOGADOR");
                });

            modelBuilder.Entity("Models.Jogo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Data");

                    b.Property<int>("Time1");

                    b.Property<int>("Time2");

                    b.HasKey("Id");

                    b.HasIndex("Time1");

                    b.HasIndex("Time2");

                    b.ToTable("JOGO");
                });

            modelBuilder.Entity("Models.Time", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<byte[]>("Bandeira");

                    b.Property<string>("NMTecnico")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("Pais")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("TIME");
                });

            modelBuilder.Entity("Models.Ficha", b =>
                {
                    b.HasOne("Models.Jogador", "Jogador")
                        .WithOne("Ficha")
                        .HasForeignKey("Models.Ficha", "JogadorId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Models.Gol", b =>
                {
                    b.HasOne("Models.Jogador", "Jogador")
                        .WithMany()
                        .HasForeignKey("JogadorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Models.Jogo", "Jogo")
                        .WithMany("Gols")
                        .HasForeignKey("JogoId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Models.Time", "Time")
                        .WithMany()
                        .HasForeignKey("TimeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Models.Jogador", b =>
                {
                    b.HasOne("Models.Time", "Time")
                        .WithMany("Jogadores")
                        .HasForeignKey("TimeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Models.Jogo", b =>
                {
                    b.HasOne("Models.Time", "Time_1")
                        .WithMany()
                        .HasForeignKey("Time1")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Models.Time", "Time_2")
                        .WithMany()
                        .HasForeignKey("Time2")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
