<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Times - @ViewData["Title"]</title>

    <environment include="Development">
        <link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.css" />
        <link rel="stylesheet" href="~/css/site.css" />
        <link href="~/css/jquery-confirm.min.css" rel="stylesheet" />
        <link href="~/css/notify-customize.css" rel="stylesheet" />
    </environment>
    <environment exclude="Development">
        <link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.css" asp-append-version="true" />
        <link href="~/css/russia.bundle.min.css" rel="stylesheet" asp-append-version="true" />
    </environment>
</head>
<body>
    <nav class="navbar navbar-inverse navbar-fixed-top">
        <div class="container">
            <div class="navbar-header">
                <button type="button" class="navbar-toggle" data-toggle="collapse" data-target=".navbar-collapse">
                    <span class="sr-only">Toggle navigation</span>
                    <span class="icon-bar"></span>
                    <span class="icon-bar"></span>
                    <span class="icon-bar"></span>
                </button>
                <a asp-area="" asp-controller="Home" asp-action="Index" class="navbar-brand">Projeto Rússia</a>
            </div>
            <div class="navbar-collapse collapse">
                <ul class="nav navbar-nav">
                    <li><a asp-area="" asp-controller="Home" asp-action="Index">Home</a></li>
                    @*<li><a asp-area="" asp-controller="Home" asp-action="NewTime">Novo time</a></li>*@
                    <li><a asp-area="" asp-controller="Game" asp-action="Index">Jogos</a></li>

                    @if (User.Identity.IsAuthenticated)
                    {
                        <li><a asp-area="" asp-controller="Account" asp-action="Logoff">Logoff</a></li>
                    }
                    else
                    {
                        <li><a asp-area="" asp-controller="Account" asp-action="Index">Login</a></li>
                    }
                </ul>
            </div>
        </div>
    </nav>
    <div class="container body-content">
        @RenderBody()
        <hr />
        <footer>
            <p>&copy; 2018 - Projeto Rússia</p>
        </footer>
    </div>

    <environment include="Development">
        <script src="~/lib/jquery/dist/jquery.js"></script>
        <script src="~/lib/bootstrap/dist/js/bootstrap.js"></script>
        <script src="~/js/site.js"></script>
        <script src="~/js/bootstrap-notify.min.js"></script>
        <script src="~/js/jquery-confirm.min.js"></script>
        <script src="~/js/signalr.min.js"></script>
    </environment>
    <environment exclude="Development">
        <script src="~/js/russia.bundle.min.js" asp-append-version="true"></script>
    </environment>

    @RenderSection("Scripts", required: false)

    <script async>
    @if (ViewBag.MsgError != null)
    {
        @:$.alert({ title: 'Aviso', content: '@Html.Raw(@ViewBag.MsgError)' });
    }
    </script>
    <script async>

        startConnection('http://localhost:65070/GoalNotification', function (connection) {
            // Create a function that the hub can call to broadcast messages.
            connection.on('ReceiveNewGoal', function (Pais, Jogador) {

                @if (!Context.Request.Path.Value.Contains("/NewGoal"))
                {
                    <text>
                        $.notify({
                            icon: "images/gol.png",
                            title: "É GOLLLLLLL",
                            message: 'É dooooo ' + Pais + '. O ' + Jogador + ' fez um drible fantástico e colocou no fundo da rede!',
                            allow_dismiss: true
                        }, {
                                type: 'minimalist',
                                delay: 8000,
                                icon_type: 'image',
                                template:
                                    '<div data-notify="container" class="col-xs-11 col-sm-3 alert alert-{0}" role="alert">' +
                                    '<button type="button" aria-hidden="true" class="close" data-notify="dismiss" style="position: absolute; right: 10px; top: 5px; z-index: 1033;">×</button>' +
                                    '<img data-notify="icon" class="img-circle pull-left">' +
                                    '<span data-notify="title">{1}</span>' +
                                    '<span data-notify="message">{2}</span>' +
                                    '</div>'
                            }
                        );
                    </text>
                }
            });
        })
            .then(function (connection) {
                console.log('connection started');
            })
            .catch(error => {
                console.error(error.message);
            });

        // Starts a connection with transport fallback - if the connection cannot be started using
        // the webSockets transport the function will fallback to the serverSentEvents transport and
        // if this does not work it will try longPolling. If the connection cannot be started using
        // any of the available transports the function will return a rejected Promise.
        function startConnection(url, configureConnection) {

            return function start(transport) {

                console.log(`Starting connection using ${signalR.TransportType[transport]} transport`)
                var connection = new signalR.HubConnection(url, { transport: transport });
                if (configureConnection && typeof configureConnection === 'function') {
                    configureConnection(connection);
                }

                return connection.start()
                    .then(function () {
                        return connection;
                    })
                    .catch(function (error) {
                        console.log(`Cannot start the connection use ${signalR.TransportType[transport]} transport. ${error.message}`);
                        if (transport !== signalR.TransportType.LongPolling) {
                            return start(transport + 1);
                        }
                        return Promise.reject(error);
                    });
            }(signalR.TransportType.WebSockets);
        }
    </script>

</body>
</html>
